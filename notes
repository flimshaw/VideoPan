%%% Sun Nov 20 12:25:20 PST 2011

Staying on track here, what needs to happen:

I need to make a FrameSlice class that has certain methods that it reqires.  So what is the responsibility of the FrameSlice, and what's the responsibility of the FrameSet?  Do we have a frame set?  No I guess we just have a bunch of frames.  What's the user telling the program:

- Starting Frame
- Distance from Lens
- Speed of car

So the user doesn't care, it just puts those in.  Now, for the time being, let's just plan on the .update() method only handling changes to the last two.  No, ugh, the only one you can change is distance from lens, and even that not neccessarily.

OK.  We need to have particle positioning and texture loading be completely agnostic of each other.  We'll spawn particles and calculated their positions in GL, and then have some queue waiting that applies textures to them one at a time.  So, we need a texturing queue I guess?  Maybe the particles are just completely agnostic about whether they are textured or not, they will just appear as white blocks for the time being.  This means we have to pre-allocate texture memory in GL.  OK.  So what traits does a frame slice need to have?

- texture
- textureOffset
- frameNumber
- speed
- focalDistance
- position(x, y) GL position (notes: is this self-calculated, or should an outside manager decide this? do the particles need to anything about each other? If we are skipping frames, we're going to need to probably offset the following frame by a fixed amount.  That being the case, who's in charge of maintaining that as variables are changed?  We're going to need a manager that does that, since particles should not have to know who's before or after them.  They will need to have their positions updated though. So I guess the manager should keep track of which frame each represents, and smartly rearrange them.

This brings up another idea.  The positioning of particles could be easily given some nice transitional elements by having the position be more of a gravitational point that each slice is drawn to, so as things are expanded or contracted, and frames are deleted or expanded, their positions, sizes, offsets etc could be modified, and let the update function handle the actual positioning of the elements. and what methods should it have?

- void:setTexture( glTexture )
- void:setSpeed( float )
- void:setFocalDistance( float )
- float:getTrueWidth( )
- float:getTextureOffset( )

%%% Sun Nov 20 14:04:37 PST 2011

OK, particle roughed out, and did a little test of the frame offset, and it looks like it'll work.  One of the main issues now is that they seem to load in in somewhat random order.

SO, what's the frameController gonna look like?  Let's map this out, and then take a walk and get some coffee or something.  The frame controller is the one that's gonna actually handle pulling textures from the video file and providing them to the correct FrameSlice in GL.  This can be a threaded process, as outlined in the earlier dealie.  So, properties the FrameController should have:

- videoFile
- startFrame
- focalDistance
- carSpeed
- maxFrameSlices
- <vector>FrameSlices
- trueWidth
- distancePerFrame
- frameWidth
- lensAngle

Methods it should have:

- setFocalDistance
- setCarSpeed
- setStartFrame
- setMaxFrames
- setFrameOffset
- getTrueWidth
- distancePerFrame

- loadFrameTexture( int frameNumber )

%%% Sun Nov 20 15:36:33 PST 2011

Back from coffee.  Didn't really get a lot of thinking done, but it's good to get up and go outside.  I really should figure out some kinda excercise schedule.  One of these days.

OK.  Let's build out our mathematical functions in the FrameController, we'll store them in a local variable to be passed off to each frame.

%%% Sun Nov 20 19:13:29 PST 2011

OK, so I've got the basics of the focal distance calculation methods in the class, but now I have to figure out how to combine them.  Let's just hard-set a few things for now to get it working roughly, and then we'll iterate from there to bring in dynamic features.

%%% Sun Nov 20 19:49:01 PST 2011

Ok, we're gonna have to start getting into the functions that actually handle textures.  Part of me wants to get it done immediately in a thread, since it doesn't look _too too_ hard, and it'll save a lot of time.  Let's do it.  Onwards.

%%% Mon Nov 21 20:55:09 PST 2011

That didn't get so far, and now I forget entirely what I was doing.  What the hell.

Do I need to map frame numbers to textures, or could I use some sort of callback system to do it?  Really I need to have a way for threads that are sent off to load textures to return them to GL space and then move on.  This requires the ability to address a particular frame.  Or actually, we don't really need to address it, we can just append it to the list of frameSlices right?  They're going to have their own shit to handle positioning etc.

%%% Mon Nov 21 21:29:38 PST 2011

git commit -m "Sort of in the middle of something, but might as well drop a breadcrumb.  Working through the thread function that handles loading images from video files.  Using a map structure to store completed frames in an array I can address by frameNumber.  The reason I'm doing this is that it's a graceful way to let frames load in any random order we choose, and still have the correct texture mapped to the appropriate frameSlice.  We ensure that we are applying the texture we think we are applying.  With multiple threads... hmm, I think maybe that's what was happening earlier!  The... hang on.  This is not the journal.  This is still just the commit message.  Signing off."

That's a commit I just made.  What ever.

Anyhow, where was I.  Yes, during the image loading thing.  Well, i was thinking that we were firing off lots of random video seeks at the same time, and then we were catching frames whose frameNumber we actually weren't sure of.  In this case, we need to make sure that the frameAvailable() when we catch it is actually the frame number we requested.  This means that we can only run one thread, and that we should somehow mutex the process of getting a frame from a video file.  Let's stare at the code for a while.

%%% Mon Nov 21 21:41:57 PST 2011

I just had a thought, that I should really not be programming right after a day like this, but in a way, I feel like I'm letting my brain dig into a mode that it is most comfortable being in for a while.  I've had a hard time getting into a groove with Cinder and this project, but right now, even though I might be many programming hours away from producing something that works, I feel like each thing I write is teaching me more pieces of knowledge that will be super useful in working with Cinder or really any other framework like this.  Writing C++ feels like a really powerful tool to have, because it can compile to run SO quickly.

%%% Mon Nov 21 22:36:15 PST 2011

So I've got it pretty much working, but I need to in and remap the functions I'm using to rotate everything.  The best way to do it, both to re-understand how it works, and to ensure I can safely forget soon, is to make a function internal to frameSlice that converts normal 0,0 top left coordinates into the 90 degree rotated gl space we're using in this scenario.  I still think it's the most effcient way, programmatically to display this, as it requires only a single GL call, rather than one for every frameSlice we're rendering.